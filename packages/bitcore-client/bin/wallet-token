#!/usr/bin/env node

const program = require('commander');
const promptly = require('promptly');
const { Wallet } = require('../ts_build/src/wallet');

program
  .version(require('../package.json').version)
  .requiredOption('--name <name>', 'REQUIRED - Wallet name')
  .requiredOption('--contractAddress <contractAddress>', 'REQUIRED - Token contract address')
  .option('--storageType <storageType>', 'optional - Name of the database to use (Mongo | Level | TextFile)')
  .option('--path <path>', 'optional - Custom wallet storage path')
  .parse(process.argv);

const main = async () => {
  const { name, path, contractAddress, storageType } = program.opts();
  try {
    const wallet = await Wallet.loadWallet({ name, path, storageType });
    if (!['MATIC', 'ETH'].includes(wallet.chain)) {
      throw new Error('Cannot add token to non-ETH wallet.');
    }
    const token = await wallet.getToken(contractAddress);
    const tokenObj = {
      symbol: token.symbol,
      address: contractAddress,
      decimals: token.decimals
    }
    const existing = wallet.tokens.find(f => f.symbol === token.symbol);
    if (existing) {
      console.log(`This wallet already has token ${existing.symbol} (${existing.address})`);
      const ans = await promptly.confirm('Would you like to replace it? (y/n)');
      if (!ans) {
        return;
      }
      wallet.tokens = wallet.tokens.filter(f => f.symbol !== token.symbol);
    }
    await wallet.addToken(tokenObj);
    console.log(`Successfully added ${token.symbol}`);
  } catch (e) {
    console.error(e);
  }
};

main();
